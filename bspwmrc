#!/bin/bash

pgrep -x sxhkd > /dev/null || sxhkd &

INTERNAL_MONITOR="eDP-1"
EXTERNAL_MONITOR="DP-1"
# on first load setup default workspaces
if [[ "$1" = 0 ]]; then
  if [[ $(xrandr -q | grep -w "${EXTERNAL_MONITOR} connected") ]]; then
    bspc monitor "$EXTERNAL_MONITOR" -d 1 2 3 4 5
    bspc monitor "$INTERNAL_MONITOR" -d 6 7 8 9 10
    bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
  else
    bspc monitor "$INTERNAL_MONITOR" -d 1 2 3 4 5 6 7 8 9 10
  fi
fi

bspc config border_width     5
bspc config window_gap          12
bspc config normal_border_color  '#d3d3d3'
bspc config active_border_color '#d3d3d3'

bspc config split_ratio          0.6
bspc config borderless_monocle   true
bspc config gapless_monocle      true

bspc config focused_border_color '#571D3F'
#bspc config focused_border_width 10

#bspc rule -a Gimp desktop='^8' state=floating follow=on
#bspc rule -a Chromium desktop='^2'
#bspc rule -a mplayer2 state=floating
#bspc rule -a Kupfer.py focus=on
#bspc rule -a Screenkey manage=off

# AUTOSTART
# Helper function to check for active process, if not found starts program on the background
_run() {
    if ! pgrep -x "${1}" &>/dev/null; then
        "$@" &
    fi
}

monitor_add() {
  # Move first 5 desktops to external monitor
  for desktop in $(bspc query -D --names -m "$INTERNAL_MONITOR" | sed 5q); do
    bspc desktop "$desktop" --to-monitor "$EXTERNAL_MONITOR"
  done

  # Remove default desktop created by bspwm
  bspc desktop Desktop --remove

  # reorder monitors
  bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
}

monitor_remove() {
  # Add default temp desktop because a minimum of one desktop is required per monitor
  bspc monitor "${EXTERNAL_MONITOR}" -a Desktop

  # Move all desktops except the last default desktop to internal monitor
  for desktop in $(bspc query -D -m "${EXTERNAL_MONITOR}");	do
    bspc desktop "$desktop" --to-monitor "${INTERNAL_MONITOR}"
  done

  # delete default desktops
  bspc desktop Desktop --remove

  # reorder desktops
  bspc monitor "$INTERNAL_MONITOR" -o 1 2 3 4 5 6 7 8 9 10
}

#setup background
feh --bg-scale ~/Pictures/Wallpapers/1.jpg

_run compton

# Kill and relaunch polybar
killall -q polybar
while pgrep -u $UID -x polybar > /dev/null; do sleep 2; done
if [[ $(xrandr -q | grep -w "${EXTERNAL_MONITOR} connected") ]]; then
  polybar --reload primary -c ~/.config/polybar/config.ini </dev/null >/var/tmp/polybar-primary.log 2>&1 200>&- &
  polybar --reload secondary -c ~/.config/polybar/config.ini </dev/null >/var/tmp/polybar-secondary.log 2>&1 200>&- &
else
  polybar --reload primary -c ~/.config/polybar/config.ini </dev/null >/var/tmp/polybar-primary.log 2>&1 200>&- &
fi



if [[ $(xrandr -q | grep -w "${EXTERNAL_MONITOR} connected") ]]; then
  # set xrandr rules for docked setup
  xrandr --output "${INTERNAL_MONITOR}" --mode 1920x1080 --rotate inverted --output "${EXTERNAL_MONITOR}" --primary --mode 1920x1080 --rotate normal --right-of "${INTERNAL_MONITOR}"
  if [[ $(bspc query -D -m "${EXTERNAL_MONITOR}" | wc -l) -ne 5 ]]; then
    monitor_add
  fi
  bspc wm -O "${EXTERNAL_MONITOR}" "${INTERNAL_MONITOR}"
else
  # set xrandr rules for mobile setup
  xrandr --output "${INTERNAL_MONITOR}" --primary --mode 1920x1080 --rotate normal --output "${EXTERNAL_MONITOR}" --off
  if [[ $(bspc query -D -m "${INTERNAL_MONITOR}" | wc -l) -ne 10 ]]; then
    monitor_remove
  fi
fi

##turn off screen timeout
xset -dpms s off

#restart sxhkd
pkill -USR1 -x sxhkd

#load info workspace
#bspc rule -a kitty desktop=^10 state=tiled follow=true
